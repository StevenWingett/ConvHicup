#!/usr/bin/perl

#############################################
#Script to convert modified HiCUP digest
#Files (with %GC and mapability added) into
#a FEnds table for hicpipe
#
#Modified hicup digest table:
#Genome:Human_GRCh37	Restriction_Enzyme1:HindIII [A^AGCTT]	Restriction_Enzyme2:None	Hicup digester version 0.4.2							
#Chromosome	Fragment_Start_Position	Fragment_End_Position	Fragment_Number	RE1_Fragment_Number	5'_Restriction_Site	3'_Restriction_Site	PosFend_Percent_GC	NegFend_Percent_GC	Pos_FEnd_Mapa	Neg_Fend_Mapa
#1	1	16007	1	1	None	Re1	65	0	10	0
#1	16008	24571	2	2	Re1	Re1	52.5	63.5	0	0
#1	24572	27981	3	3	Re1	Re1	35	62	0	0





#hicpipe fends table:
#fend	frag	chr	coord	valid	frag_len	frag_gc	map_score	map_bin
#1	2	1	16008	0	8564	0.635	0	1
#2	1	1	16007	0	16007	0.65	0.1	1
#3	3	1	24572	0	3410	0.62	0	1
#4	2	1	24571	0	8564	0.525	0	1
#5	4	1	27982	0	2448	0.33	0	1
#############################################
#(The coordinate is the position of the FEnd adjacent to the cut site).

use strict;
use warnings;
use Math::Round;
use Getopt::Long;

use Data::Dumper;

my $help;
my $config_result = GetOptions(
	"help" => \$help
);

if ($help or !@ARGV) {
    print while (<DATA>);
    exit(0);
}

die "Please specify ONE modified digest file (with GC and mapability scores) to process.\n" unless scalar @ARGV == 1;

open( IN, '<', $ARGV[0]) or die "Could not read '$ARGV[0]' : $!";
open( OUT, '>', "$ARGV[0].hicpipe_fends_table.txt") or die "Could not close filehandle on '$ARGV[0].hicpipe_fends_table.txt' : $!";
scalar <IN>;    #Ignore headers
scalar <IN>;
print OUT "fend\tfrag\tchr\tcoord\tvalid\tfrag_len\tfrag_gc\tmap_score\tmap_bin\n";

#The FEnd order for hicpipe is not quite the same as for hicup, so read in 2 lines
my $fragA = scalar <IN>;
chomp $fragA;
my $fragB;

my $fend_nos = 1;
while(<IN>){

	$fragB = $_;
	chomp $fragB;
		
	print OUT "$fend_nos\t" . convert2hicpipe($fragB, 'NEG') . "\n";
	$fend_nos++;
	
	print OUT "$fend_nos\t" . convert2hicpipe($fragA, 'POS') . "\n";
	$fend_nos++;

	$fragA = $fragB;
}


close IN or die "Could not close filehandle on '$ARGV[0]' : $!";

print "Processing complete.\n";

exit (0);


#########################################################################
#Subroutines
#########################################################################

#Takes a line from the hicup digest file (with GC and mapability data) and
#creates a line in the hicpipe fend format. Also takes 'NEG' or 'POS' as
#an argument to determine whether it is a negative or positive FEnd
sub convert2hicpipe{

	my ($line, $posOrNeg) = @_;
	my ($csome, $start, $end, $fragNos, undef, undef, undef, $posGC, $negGC, $posFendMapa, $NegFendMapa) = split (/\t/, $line);
	
	#Values to calculate
	my $coord;
	my $fragLen;
	my $mapa;
	my $valid;
	my $map_bin;
	my $gc;
	
	$coord = ($posOrNeg eq 'POS') ? $end : $start;    #Positive FEnds have reads 'pointing fowards' at the end of rest. frags.
	
	$mapa = ($posOrNeg eq 'POS') ? $posFendMapa : $NegFendMapa;	
	$mapa = nearest(0.00001, ($mapa/100) );    #Proportion not percentage
	
	$valid = ($mapa < 0.5) ? 0 : 1;
	
	$fragLen = $end - $start + 1;

	$gc = ($posOrNeg eq 'POS') ? $posGC : $negGC;    #Positive FEnds have reads 'pointing fowards' at the end of rest. frags.
	$gc = nearest(0.001, ($gc / 100) );    #Proportion not percentage
	
	#A few inconsistencies here, but this is how the FEnds appears to be filtered in Tanay input table format
	if($mapa <= 0.6){
		$map_bin = 1;
	}elsif($mapa <= 0.7){
		$map_bin = 2;
	}elsif( $mapa <= 0.8){
		$map_bin = 3;
	}elsif($mapa < 0.9){
		$map_bin = 4;
	}else{
		$map_bin = 5;
	}
	
	return join( "\t", ($fragNos, $csome, $coord, $valid, $fragLen, $gc, $mapa, $map_bin) );
}


__DATA__

SYNOPSIS

Generate a fragment ends (FEnds) table for Hicpipe

digest2Fends [OPTIONS]... [MODIFIED HICUP DIGEST FILE]

FUNCTION

Takes a modified HiCUP digest file (with %GC and %mapability values appended by 'calcGC'
and 'mapaFends' respectively and creates a FEnds table in a format compatible with Hicpipe.

COMMAND LINE OPTIONS

--help         Print help message and exit
