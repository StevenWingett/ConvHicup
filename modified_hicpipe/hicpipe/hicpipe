#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use FindBin '$Bin';
use lib $Bin;
use File::Basename;
use Cwd;


use Data::Dumper;


###############################################################
#hicpipe: wrapper for the Tanay hicpipe pipeline
###############################################################


##########################################################
#Get user-supplied parameters
#Option variables
my $bin_list;
my $email;
my $help;

my $config_result = GetOptions(    #Stores parameters
	"bin=s" =>	\$bin_list,    #Comma separated list
	"email=s"   => \$email,
	"help"   => \$help,
);

die "Command line options need to be in the correct format (hicpipe -help for more details).\n" unless ($config_result);

my @bin_sizes;

########################
#Check input ok
if ($help) {
    print while (<DATA>);
    exit(0);
}

unless(@ARGV){
	print while (<DATA>);
    exit(0);
}

my $listFile;
if(scalar @ARGV == 1){
	$listFile = $ARGV[0]
}else{
	die "Specify only ONE list file (see --help for more details).\n";
}

if(defined $bin_list){
	die "Option --bin needs to be a comma-separated list of integers.\n" unless $bin_list =~ /^[\d+,*]+$/;
	@bin_sizes = split(/,/, $bin_list);
}else{
	$bin_sizes[0] = 1_000_000;
}

$email = 'steven.wingett@babraham.ac.uk' unless defined $email;


########################
#Process list file
#File has format
#Filename (possibly with path) of RAW file \t FEnds file to use
my %files;    # %{[path]/file} = FEnds file
if(-e $listFile){
	open(LISTFILE, '<', $listFile) or die "Could not open $listFile : $!";
	while(<LISTFILE>){
		my $line = $_;
		chomp $line;
		
		next if($line =~ /^\s*$/);
		
		my ($rawFile, $fendFile) = split(/\t/, $line);

		foreach my $inputFile ($rawFile, $fendFile){
			$inputFile =~ s/^\s+//;
        	$inputFile =~ s/\s+$//;       #Remove starting/trailing white spaces
        }

		$files{$rawFile} = $fendFile;
	}	
	close LISTFILE or die "Could not close filehandle 'LISTFILE' on file '$listFile' : $!";
}

#print Dumper \%files;

checkFilesOk();



#print Dumper \@allFiles;



##############################
#Read in template file
my $templateText;
open(TEMPLATE, '<', "$Bin/input/template.cfg") or die "Could not open '$Bin/input/template.cfg': $!";
while(<TEMPLATE>){
		my $line = $_;		
		next if($line =~ /^\s*$/);
		$templateText .= $line;
}
close TEMPLATE or die "Could not close filehandle 'TEMPLATE' on file '$Bin/input/template.cfg' : $!";


##############################################
#Create relevant directories and config files and links to input files
foreach my $fileAndPath (keys %files){
	my $path = dirname($fileAndPath);
	$path = getcwd if ($path eq '.');
	my $filename = basename($fileAndPath);

	foreach my $bin_size (@bin_sizes){

		unless(-d "$Bin/input/$bin_size"){    
			!system("mkdir $Bin/input/$bin_size") or die "Could not create directory '$Bin/input/$bin_size' : $!";    #Create directory
		}

		!system("mkdir $Bin/input/$bin_size/$filename") or die "Could not create directory '$Bin/input/$bin_size/$filename' : $!";    #Create directory
		
		!system("ln -s $path/$filename $Bin/input/$bin_size/$filename/$bin_size.$filename") 
			or die "Could not create symbolic link to '$path/$filename' named '$Bin/input/$bin_size/$filename/$bin_size.$filename' : $!";    #Create linke to RAW file

		#Create link to appropriate FEnds file 
		my $fendsFileAndPath = $files{$fileAndPath};
		my $fendsPath = dirname($fendsFileAndPath);
		$fendsPath = getcwd if ($fendsPath eq '.');
		my $fendsFile = basename($fendsFileAndPath);

		!system("ln -s $fendsPath/$fendsFile $Bin/input/$bin_size/$filename/$fendsFile")
			or die "Could not create symbolic link to '$fendsPath/$fendsFile' named '$Bin/input/$bin_size/$filename/$fendsFile' : $!";

		createConfig($templateText, $fendsFile, $filename, $bin_size);

	}
	
}


############################################
#Send jobs to cluster
open(LOG, '>', 'hicpipe_wrapper_log.txt') or die "Could not write to 'hicpipe_wrapper_log.txt' : $!";    #Create a log file

foreach my $fileAndPath (keys %files){
	foreach my $bin_size (@bin_sizes){
		my $rawFile = basename($fileAndPath);
		my $configFileAndPath = "input/$bin_size/$rawFile/$bin_size.$rawFile.cfg";
		my $jobname = "hicpipe.$bin_size.$rawFile";

		my $command = "make CFG=$configFileAndPath";
		my $clusterCommand = "qsub -clear -cwd -V -l h_vmem=10G -j y -pe orte 1 -o $jobname.out -N $jobname -m eas -M $email $command";

		print LOG "$clusterCommand\n";
		#!system("$command") or die "Could not run '$command' : $!";
		!system("$clusterCommand") or die "Could not run '$clusterCommand' : $!";
	}
}

close LOG or die "Could not close 'hicpipe_wrapper_log.txt : $!";

print "Processing complete (i.e. all jobs submitted).\n";

exit (0);




#######################################################################
#Subroutines
######################################################################


# Sub: createConfig
# Creates an appropriate config file in the relevant directory
# Takes the template text, fends filename + path and RAW filename + path
sub createConfig{
	my ($template, $fendsFile, $rawFile, $bin_size) = @_;

	my $fendsFileAndPath = "input/$bin_size/$rawFile/$fendsFile";    #Newly created symbolic link
	my $rawFileAndPath = "input/$bin_size/$rawFile/$bin_size.$rawFile";    #Newly created symbolic link
	my $outdir = $bin_size . '/' . "$bin_size.$rawFile";

	#Edit config file
	$template =~ s/\[FENDS_FILE_AND_PATH\]/$fendsFileAndPath/;
	$template =~ s/\[RAW_FILE_AND_PATH\]/$rawFileAndPath/;
	$template =~ s/\[BIN_RAW_FILE\]/$outdir/;
	$template =~ s/\[DATASET_TITLE\]/$bin_size.$rawFile.hicpipe/;
	$template =~ s/\[BIN_SIZE\]/$bin_size/;

	#Write out config file
	my $configName = "$rawFileAndPath.cfg";
	open(EDITED_TEMPLATE, '>', $configName ) or die "Could not write to $configName : $!";
	print EDITED_TEMPLATE $template;
	close EDITED_TEMPLATE or die "Could not close filehandle 'EDITED_TEMPLATE' on file '$configName'  : $!";

}










######################################################################
#sub: checkFilesOk
#Check input files exist and no RAW filename duplicates
sub checkFilesOk{
	my @allFiles = dedupHash(%files);
	die "Please add files or change configuration.\n" unless check_files_exist (\@allFiles, 'EXISTS');

	#Check that RAW filenames are not duplicated
	my %filenamesOnly;
	foreach my $fileAndPath (keys %files){
		my $filename = basename($fileAndPath);
		$filenamesOnly{$filename}++;
	}

	my $parameters_ok = 1;
	foreach my $file (keys %filenamesOnly){
		if ($filenamesOnly{$file} > 1){
			warn '$file occurs more than once\n';
			$parameters_ok = 0;
		}
	}

	die "Please adjust configuration.\n" unless ($parameters_ok);

}


##################################################################
#Sub: dedupHash
#Takes a hash and returns an array with all terms
#de-duplicated
sub dedupHash {
    my @array = @_;
    my %uniques;

    foreach (@array) {
        $uniques{$_} = '';
    }
    my @uniques_array = keys %uniques;
    return @uniques_array;
}



###################################################################
#check_files_exist:
#Takes a reference to an array containing paths to filenames and verifies they exist
#Warns of files that do no exit. Returns 1 if all files exist but 0 if this is not
#the case.
#
#Also, takes a second argument:
#$_[1] should be 'EXISTS' or 'NOT_EXISTS'
#If 'NOT_EXIST' warns if file already exists.  Returns '1' if none of the
#files exists and '0' if one or multiple files already exist
sub check_files_exist {
    my $files      = $_[0];    #Reference to array
    my $check_for  = $_[1];
    my $all_exist  = 1;
    my $not_exists = 1;

    if ( $check_for eq 'EXISTS' ) {
        foreach my $file (@$files) {
            unless ( -e $file ) {
                warn "$file does not exist\n";
                $all_exist = 0;
            }
        }
    } elsif ( $check_for eq 'NOT_EXISTS' ) {
        foreach my $file (@$files) {
            if ( -e $file ) {
                warn "$file already exists\n";
                $not_exists = 0;
            }
        }
    } else {
        die "Subroutine 'check_files_exist' requires argument 'EXISTS' or 'NOT_EXISTS'.\n";
    }

    if ( $check_for eq 'EXISTS' ) {
        return $all_exist;
    } else {
        return $not_exists;
    }
}




__DATA__

This wrapper sends hicpipe jobs to the cluster in an automated way

SYNOPSIS

hicpipe [OPTIONS]... [LIST FILE]...

FUNCTION

TODO

COMMAND LINE OPTIONS

--bin            Comma-separated list of bin sizes
                 Default: 1,000,000
--email          Address to email cluster output 
                 (default: steven.wingett@babraham.ac.uk)
--help	         Print program help and exit
