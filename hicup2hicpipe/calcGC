#!/usr/bin/perl

###################################################
#Takes FASTA genome files and a HiCUP digest file
#and calculate the %GC content of each restriction
#fragment 
###################################################

use strict;
use warnings;
use Getopt::Long;
use POSIX;

use Data::Dumper;

#Option variables
my $digest;

my $config_result = GetOptions(
	"digest=s" => \$digest
);

die "Please specify files to process.\n" unless @ARGV;

die "Please specificy a HiCUP digest file\n" unless defined $digest;
die "Digest file '$digest' does not exit\n" unless (-e $digest);

my @files = deduplicate_array(@ARGV);
my %genome;   #%{chromosome} = sequence

#Read in the genome
foreach my $file (@files){

	print "Reading '$file'\n";

	if($file =~ /\.gz$/){
		open( IN, "zcat $file |" ) or die "Couldn't read file '$file: $!";
	}else{
		open( IN, '<', $file ) or die "Couldn't read file '$file: $!";
	}

	my $csome;
	while (<IN>) {
		my $line = $_;
		chomp($line);
		next if $line =~ /^\s*$/;

		if ( $line =~ /^\>/ ) {    #Process FASTA header to determine chromosome
			unless($line =~ /^\>(\S+).*$/){
				die "File '$file' is not in FASTA format at line:\n$line\nA chromosome name is reqired immediately after '>' (blank spaces are not allowed)\nFor more details on FASTA format go to:\nhttp://en.wikipedia.org/wiki/FASTA_format\n";
			}
			
			$csome = $1;
			
			if(exists $genome{$csome}){
				die "Chromosome name '$csome' occurs more than once in input file(s)\n";
			}
			next;
		}	
		$genome{$csome} .= $line;
	}	
close IN or die "Could not close $file\n";

}

open(DIGEST, '<', $digest) or die "Could not open '$digest' : $!";
open( OUT, '>', "$digest.GC.txt") or die "Could not write to '$digest.GC.txt' : $!";


my $header = scalar <DIGEST>;
$header .= scalar <DIGEST>;
chomp $header;
$header .= "\tPercent_GC\n";
print OUT $header;

while(<DIGEST>){
	my $line = $_;
	chomp $line;
	
	my ($csome, $start, $end) = split(/\t/, $line);
	die "'$csome' not found in FASTA file(s)" unless exists $genome{$csome};

	my $seqLength = $end - $start + 1;
	my $seq = uc substr($genome{$csome}, $start - 1, $seqLength);    #Offset 0-based for substr
	my $countGC = $seq =~ tr/GC//;
	my $percGC = 100 * $countGC / $seqLength;

	print OUT "$line\t$percGC\n";
}

close DIGEST or die "Could not close filehandle 'DIGEST' on file '$digest' : $!";
close OUT or die "Could not close filehandle on '$digest.GC.txt': $!";

print "Processing complete.\n";

exit (0);





#################################################################
#Subroutines
#################################################################


#Sub: deduplicate_array
#Takes and array and returns the array with duplicates removed
#(keeping 1 copy of each unique entry).
sub deduplicate_array {
    my @array = @_;
    my %uniques;

    foreach (@array) {
        $uniques{$_} = '';
    }
    my @uniques_array = keys %uniques;
    return @uniques_array;
}

